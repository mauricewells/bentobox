/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import { Contract, ContractFactory, Overrides } from "@ethersproject/contracts";

import type { DummyStrategyMock } from "../DummyStrategyMock";

export class DummyStrategyMock__factory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer);
  }

  deploy(
    bentoBox_: string,
    token_: string,
    overrides?: Overrides
  ): Promise<DummyStrategyMock> {
    return super.deploy(
      bentoBox_,
      token_,
      overrides || {}
    ) as Promise<DummyStrategyMock>;
  }
  getDeployTransaction(
    bentoBox_: string,
    token_: string,
    overrides?: Overrides
  ): TransactionRequest {
    return super.getDeployTransaction(bentoBox_, token_, overrides || {});
  }
  attach(address: string): DummyStrategyMock {
    return super.attach(address) as DummyStrategyMock;
  }
  connect(signer: Signer): DummyStrategyMock__factory {
    return super.connect(signer) as DummyStrategyMock__factory;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): DummyStrategyMock {
    return new Contract(address, _abi, signerOrProvider) as DummyStrategyMock;
  }
}

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "bentoBox_",
        type: "address",
      },
      {
        internalType: "contract IERC20",
        name: "token_",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "_harvestProfit",
    outputs: [
      {
        internalType: "int256",
        name: "",
        type: "int256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "balance",
        type: "uint256",
      },
    ],
    name: "exit",
    outputs: [
      {
        internalType: "int256",
        name: "amountAdded",
        type: "int256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "balance",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "harvest",
    outputs: [
      {
        internalType: "int256",
        name: "amountAdded",
        type: "int256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "int256",
        name: "val",
        type: "int256",
      },
    ],
    name: "setHarvestProfit",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "skim",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "withdraw",
    outputs: [
      {
        internalType: "uint256",
        name: "actualAmount",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x60c060405234801561001057600080fd5b506040516108e23803806108e28339818101604052604081101561003357600080fd5b5080516020909101516001600160601b0319606092831b811660a052911b1660805260805160601c60a05160601c61084661009c6000398061015a528061022252806103d6528061047f5250806102f4528061038d528061050f528061060052506108466000f3fe608060405234801561001057600080fd5b50600436106100725760003560e01c80636939aaf5116100505780636939aaf5146100fe5780637f8661a11461011b578063f78cf93a1461013857610072565b806318fccc76146100775780632e1a7d4d146100c257806363320675146100df575b600080fd5b6100b06004803603604081101561008d57600080fd5b508035906020013573ffffffffffffffffffffffffffffffffffffffff16610140565b60408051918252519081900360200190f35b6100b0600480360360208110156100d857600080fd5b5035610208565b6100fc600480360360208110156100f557600080fd5b50356103b9565b005b6100fc6004803603602081101561011457600080fd5b50356103be565b6100b06004803603602081101561013157600080fd5b5035610465565b6100b061062d565b60003373ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016146101e657604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b6000805413156101fb57506000548201610202565b5060005482035b92915050565b60003373ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016146102ae57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b604080517f70a08231000000000000000000000000000000000000000000000000000000008152306004820152905173ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016916370a08231916024808301926020929190829003018186803b15801561033a57600080fd5b505afa15801561034e573d6000803e3d6000fd5b505050506040513d602081101561036457600080fd5b50519050808211156103735750805b6103b473ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000163383610633565b919050565b600055565b3373ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000161461046257604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b50565b60003373ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000161461050b57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b15801561059457600080fd5b505afa1580156105a8573d6000803e3d6000fd5b505050506040513d60208110156105be57600080fd5b505160008054858303945091925012156105de57600054820191506105e6565b600054820391505b61062773ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000163383610633565b50919050565b60005481565b6040805173ffffffffffffffffffffffffffffffffffffffff8481166024830152604480830185905283518084039091018152606490920183526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fa9059cbb00000000000000000000000000000000000000000000000000000000178152925182516000946060949389169392918291908083835b6020831061070957805182527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe090920191602091820191016106cc565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d806000811461076b576040519150601f19603f3d011682016040523d82523d6000602084013e610770565b606091505b509150915081801561079e57508051158061079e575080806020019051602081101561079b57600080fd5b50515b61080957604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601c60248201527f426f72696e6745524332303a205472616e73666572206661696c656400000000604482015290519081900360640190fd5b505050505056fea26469706673582212209e552827011653a1623d64adc174ad080ffb90f5d9efe8642e13d9b1f262ab7264736f6c634300060c0033";
