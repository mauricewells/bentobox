/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import { Contract, ContractFactory, Overrides } from "@ethersproject/contracts";

import type { ERC20Data } from "../ERC20Data";

export class ERC20Data__factory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer);
  }

  deploy(overrides?: Overrides): Promise<ERC20Data> {
    return super.deploy(overrides || {}) as Promise<ERC20Data>;
  }
  getDeployTransaction(overrides?: Overrides): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): ERC20Data {
    return super.attach(address) as ERC20Data;
  }
  connect(signer: Signer): ERC20Data__factory {
    return super.connect(signer) as ERC20Data__factory;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): ERC20Data {
    return new Contract(address, _abi, signerOrProvider) as ERC20Data;
  }
}

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "allowance",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "balanceOf",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "nonces",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50610170806100206000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c806370a08231146100465780637ecebe001461008b578063dd62ed3e146100be575b600080fd5b6100796004803603602081101561005c57600080fd5b503573ffffffffffffffffffffffffffffffffffffffff166100f9565b60408051918252519081900360200190f35b610079600480360360208110156100a157600080fd5b503573ffffffffffffffffffffffffffffffffffffffff1661010b565b610079600480360360408110156100d457600080fd5b5073ffffffffffffffffffffffffffffffffffffffff8135811691602001351661011d565b60006020819052908152604090205481565b60026020526000908152604090205481565b60016020908152600092835260408084209091529082529020548156fea26469706673582212208262e52ecc4ad0db3b4f91d78bfc5f94ac26eec24310f72a914e13512c37246564736f6c634300060c0033";
